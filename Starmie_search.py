import utilities as utl
import pandas as pd
import csv
import argparse
import os
from pathlib import Path


class Starmie_Search:
    def __init__(self):
        """
        Initialize the Starmie Search class.
        This class is used to do reranking using Starmie.
        We have a ranked list of tables with all the details produced by Starmie.
        This class is used to just select the top k.
        """
        self.k = 0
        self.results = []
        self.unionable_data = None

    def load_unionable_tables(self, path):
        """
        Load the mapping between query and its unionable tables generated by a system like Starmie.
        
        Args:
            path (str): Path to the pickle file containing unionable tables data
        """
        self.unionable_data = utl.loadDictionaryFromPickleFile(path)

    def process_results(self, k_range, output_file):
        """
        Process the unionable data and write results to CSV file.
        
        Args:
            k_range (tuple): Range of k values to process (start, end)
            output_file (str): Path to output CSV file
        """
        # Sort the unionable data by scores
        sorted_unionable_data = {}
        for query_name, tuples_list in self.unionable_data.items():
            sorted_list = sorted(tuples_list, key=lambda x: x[1], reverse=True)
            sorted_unionable_data[query_name] = sorted_list

        # Create output directory if it doesn't exist
        os.makedirs(os.path.dirname(output_file), exist_ok=True)

        # Write results to CSV
        with open(output_file, mode="w", newline="") as csv_file:
            csv_writer = csv.writer(csv_file)
            csv_writer.writerow(["query_name", "tables", "execution_time", "k"])

            for k in range(k_range[0], k_range[1] + 1):
                for query_name, tuples_list in sorted_unionable_data.items():
                    utables = []
                    try:
                        for i in range(k):
                            utables.append(tuples_list[i][0])
                        csv_writer.writerow([query_name, utables, 0, k])
                    except Exception as e:
                        print(f"Error processing k={k} for query {query_name}: {str(e)}")


def parse_args():
    """
    Parse command line arguments.
    
    Returns:
        argparse.Namespace: Parsed arguments
    """
    parser = argparse.ArgumentParser(description='Process Starmie search results and generate CSV output.')
    
    parser.add_argument('--data_folder', type=str, required=True,
                      help='Path to the data folder (e.g., data/santos/small)')
    
    parser.add_argument('--input_file', type=str, required=True,
                      help='Path to the input pickle file containing Starmie results')
    
    parser.add_argument('--output_file', type=str, required=True,
                      help='Path to the output CSV file')
    
    parser.add_argument('--k_start', type=int, default=2,
                      help='Starting value of k (default: 2)')
    
    parser.add_argument('--k_end', type=int, default=10,
                      help='Ending value of k (default: 10)')
    
    return parser.parse_args()


def main():
    """
    Main function to process Starmie search results.
    """
    # Parse command line arguments
    args = parse_args()
    
    # Initialize Starmie Search
    s_search = Starmie_Search()
    
    # Load unionable tables
    print(f"Loading unionable tables from {args.input_file}")
    s_search.load_unionable_tables(args.input_file)
    
    # Process results
    print(f"Processing results for k={args.k_start} to {args.k_end}")
    s_search.process_results((args.k_start, args.k_end), args.output_file)
    
    print(f"Results written to {args.output_file}")


if __name__ == "__main__":
    main()